#Add paths, we want to be able to run in either root or Run/
import sys
sys.path.append("py")
sys.path.append("../py")


#Cosmologies
from LCDMCosmology import *
from oLCDMCosmology import *
from wLCDMCosmology import *
from PolyCDMCosmology import *

#JAV
from owa0CDMCosmology import *
from JordiCDMCosmology import *
from WeirdCDMCosmology import *
from TLightCosmology import *
from SplineLCDMCosmology import *
from DecayLCDMCosmology import *
from StepCDMCosmology import *

#Like modules
from BOSSLikelihoods import *
from SimpleCMB import *
from CompressedSNLikelihood import *
from HubbleParameterLikelihood import *

#Composite Likelihood
from CompositeLikelihood import *

#Analyzers
from MaxLikeAnalyzer import *
from MCMCAnalyzer import *


## String parser Aux routines
model_list="LCDOM, LCDMasslessnu, nuLCDM, NnuLCDM, noradLCDM, oLCDM, wCDM, waCDM, owCDM,"\
           "owaCDM, JordiCDM, WeirdCDM, TLight, Spline, PolyCDM"

def ParseModel(model):
    if model=="LCDM":
        T=LCDMCosmology()
    elif model=="LCDMmasslessnu":
        T=LCDMCosmology(mnu=0)
    elif model=="nuLCDM":
        T=LCDMCosmology()
        T.setVaryMnu()
    elif model=="NnuLCDM":
        LCDMCosmology.rd_approx="tabulated_Nnu"
        T=LCDMCosmology()
        T.setVaryNnu()
    elif model=="noradLCDM":
        T=LCDMCosmology(disable_radiation=True)
    elif model=="oLCDM":
        T=oLCDMCosmology()
    elif model=="wCDM":
        T=wLCDMCosmology()
    elif model=="waCDM":
        T=owa0CDMCosmology(varyOk=False)
    elif model=="owCDM":
        T=owa0CDMCosmology(varywa=False)
    elif model=="owaCDM":
        T=owa0CDMCosmology()
    elif model=="JordiCDM":
        T=JordiCDMCosmology()
    elif model=="WeirdCDM":
        T=WeirdCDMCosmology()
    elif model=="TLight":
        T=TLightCosmology()
    elif model=="StepCDM":
        T=StepCDMCosmology()
    elif model=="Spline":
        T=SplineLCDMCosmology()
    elif model=="Decay":
        T=DecayLCDMCosmology() 
    elif model=="PolyCDM":
        T=PolyCDMCosmology()
    else:
        print "Cannot recognize model", model
        sys.exit(1)

    return T

data_list="BBAO, GBAO, GBAO_no6dF, LBAO, LaBAO, LxBAO, CMBP, cCMBP, CMBW, SN, RiessH0, 6dFGS"
def ParseDataset(datasets):
    dlist=datasets.split('+')
    if 'BBAO' in dlist:
        L=CompositeLikelihood([
        DR11LOWZ(),
        DR11CMASS(),
        DR11LyaAuto(),
        DR11LyaCross(),
        SixdFGS()
        ])
        dlist.remove('BBAO')
    elif 'GBAO' in dlist:
        L=CompositeLikelihood([
        DR11LOWZ(),
        DR11CMASS(),
        SixdFGS()
        ])
        dlist.remove('GBAO')
    elif 'GBAO_no6dF' in dlist:
        L=CompositeLikelihood([
        DR11LOWZ(),
        DR11CMASS()
        ])
        dlist.remove('GBAO_no6dF')
    elif 'LBAO' in dlist:
        L=CompositeLikelihood([
        DR11LyaAuto(),
        DR11LyaCross()
        ])
        dlist.remove('LBAO')

    elif 'LaBAO' in dlist:
        L=CompositeLikelihood([
        DR11LyaAuto(),
        ])
        dlist.remove('LaBAO')

    elif 'LxBAO' in dlist:
        L=CompositeLikelihood([
        DR11LyaCross(),
        ])
        dlist.remove('LxBAO')
    else:
        L=CompositeLikelihood([])

    if 'CMBP' in dlist:
        L.addLikelihood(PlanckLikelihood())
        dlist.remove('CMBP')

    if 'cCMBP' in dlist:
        L.addLikelihood(cPlanckLikelihood())
        dlist.remove('cCMBP')

    if 'CMBW' in dlist:
        L.addLikelihood(WMAP9Likelihood())
        dlist.remove('CMBW')

    if 'SN' in dlist:
        L.addLikelihood(BetouleSN())
        dlist.remove('SN')

    if 'RiessH0' in dlist:
        L.addLikelihood(RiessH0())
        dlist.remove('RiessH0')
    
    if '6dFGS' in dlist:
        L.addLikelihood(SixdFGS())
        dlist.remove('6dFGS')    
    
    if len(dlist)>0:
        print "Cannot parse data, unrecognizable part:", dlist
        sys.exit(1)

    return L
