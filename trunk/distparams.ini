file_root = chains/DR12/LCDM_phy_CombBAOzb3
#file_root =/gpfs01/astro/workarea/jvazquez/chains_SimpleMC/LCDM_phy_BBAO
#file_root =/astro/u/jvazquez/work/SimpleMC/trunk/chains/Quint2/Quint_final_phy_BBAO+Planck

#if zero, columnnum calculated automatically as total number of columns
columnnum  = 0

out_root = 
out_dir = stats/ 
plot_data_dir = plot_data/

#If 0 assume 1 and no chain filename prefixes; if -1 read as many as exist
chain_num = -1
first_chain = 
exclude_chain = 1 

#For disgarding burn-in if using raw chains
#if < 1 interpreted as a fraction of the total number of rows (0.3 ignores first 30% of lines)
ignore_rows =0.3

#Number of output bins for plotting, and relative scale of the Gaussian kernel
#Should check plots are robust to changes in these parameters. 
num_bins = 100
num_bins_2D=40

smooth_scale_1D =0.30
#if >= 1 smooth by smooth_scale_1D bin widths
#if > 0  and <1 smooth by Gaussian of smooth_scale_1D standard deviations in each parameter (around 0.2-0.3 is often good)
#if < 0 uses automatic smoothing length (changes with parameter)
#-the overall smoothing length is scaled by abs(smooth_scale_1D) from very crude guess at best overall scale

#For 2D this is the smoothing scale relative to the bin size
smooth_scale_2D =3

#for 3d plots
max_scatter_points = 2000

#if T produced B&W printer friendly output
B&W = F

plot_ext = py

#version of MatLab you are using if plot_ext=m
matlab_version = 7

#To make e.g. 1D plots automatically uncomment this
#finish_run_command= matlab < %ROOTNAME%.m

#Switches; auto_label labels all parameters by their number
no_plots = F
no_tests = F
auto_label = F
#samples_are_chains = F can be useful for other samples when first two columns not present
samples_are_chains = T

#Include these in 1D plots for comparison - must have same parameters
compare_num = 2
compare1 = LCDM_phy_CombBAOzb1
compare2 = LCDM_phy_CombBAOzb2
#compare1 = Quint_all_3f_phy_BBAO+Planck

line_labels= F

plot_meanlikes = T
shade_meanlikes = T

# if non-zero, output _thin file, thinned by thin_factor
thin_factor = 0
#Do probabilistic importance sampling to single samples
make_single_samples = F
single_thin = 4

#Do simple importance sampling
adjust_priors = F
#Map parameters to other derived quantities
map_params = F

num_contours = 3
contour1 = 0.68
contour2 = 0.95
contour3 = 0.97

#If the distribution is skewed, so two probability of tails differs by more than credible_interval_threshold
#of the peak value, use equal-probability limits rather than integrating inwards equally at both tails
#Note credible interval depend on smoothing
credible_interval_threshold = 0.05

#if we only want 2D plots agains a particular variable
plot_2D_param = 0

#if above zero, instead plot just these combinations:
#if both zero it will plot most correlated variables
plot_2D_num = 0
plot1 =  h nnu
plot2 =

#number of sample plots, colored by third parameter
#if last parameter is 0 or -1 colored by the parameter most correlated
#with one of the eigenvector directions (e.g. parallel or orthogonal to degeneracy)
num_3D_plots = 0
3D_plot1 = H0 omegam tau

#Output 2D plots for param combos with 1D marginalized plots along the diagonal
triangle_plot = T
triangle_params = Om h Obh2 
#ACPNS_1_like ACPNS_3_like

#e.g. colormap('jet')
matlab_colscheme =

#Parameters to use. If not specified use all parameters which have lables.
plot_params = Om Obh2 h ACPNS_1_like ACPNS_3_like
#lam A lB  V0
#plot_params = omegam omegabh2 h

#Get set label to empty to not include a parameter in the parameter_names file
#lab[asz]=

#marker[x] adds vertical line to MatLab 1D plot
marker[nrun] = 0

#Need to give limits if prior cuts off distribution where not very small
limits[r02]= 0 N
limits[r10]= 0 N
limits[DR11LOWZ] = 0 2.4
limits[SixdFGS] = 0  3
limits[A] = 0 N
limits[lB] = 0 N
limits[lam]= 0 N
limits[ACPNS_1_like] = N 0
limits[ACPNS_3_like] = N 0



#all_limits sets all limitsxx for all variables to the same; can be useful for bins
all_limits = 

#compute two-tail marginalized limits irrespective of limits settings above
#(otherwise limits are two-tail only for those parameters without limits)
force_twotail = F

#PCA - analysis output in file file_root.PCA
#number of parameter to do PCA for
PCA_num = 0
PCA_normparam = omegam
#The parameters to use
PCA_params = omegam H0 tau
#L for log(x), M for log(-x), N for no log
PCA_func   = LLL

#if parameter_names empty set from file_root.paramnames if it exists
#otherwise set up labels manually in this file using lab1=... etc.
parameter_names = chains/LCDM_phy_ACPNS_3.paramnames
#/astro/u/jvazquez/work/SimpleMC/trunk/chains/Quint/Quint_all_3f_phy_BBAO.paramnames
#PolyCDM_phy_BBAO+SN.paramnames


#If generated chain at higher temperature can cool for computing results
cool = 1.0
