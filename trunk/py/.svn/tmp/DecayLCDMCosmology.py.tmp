## This is LCDM cosmology with optional
## curvature which you can set up with 
## setVaryOk()


from pylab import *
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot  as pyplot
from scipy.interpolate import interp1d

from LCDMCosmology import *

class DecayLCDMCosmology(LCDMCosmology):
    ## note that if we don't varyOr, it will be set so that
    ## density at early a is zero.
    def __init__(self, varylam=True, varyOmx=True, varyOr=False):
        
        self.varylam=varylam
        self.varyOmx= varyOmx
        self.varyOr= varyOr      
        
        self.lam= lambda_par.value
        self.Omx   =  Omx_par.value
        self.Or   =  Or_par.value

        LCDMCosmology.__init__(self, mnu=0)

        self.logar= linspace(0.0,-7.1,100)
        self.ilogar= self.logar[::-1]

        self.SolveEq()        


    ## my free parameters. We add Ok on top of LCDM ones (we inherit LCDM)
    def freeParameters(self):
        l=LCDMCosmology.freeParameters(self)
        if (self.varylam): l.append(lambda_par)
        if (self.varyOmx): l.append(Omx_par)
        if (self.varyOr): l.append(Or_par)
        return l


    def updateParams(self,pars):
        ok=LCDMCosmology.updateParams(self,pars)
        if not ok:
            return False
        for p in pars:
            if p.name=="lambda":
                self.lam=p.value
            if p.name=="Omx":
                self.Omx=p.value
            if p.name=="Or":
                self.Or=p.value
        self.SolveEq()
        return True



    def RHS(self,y,lna):
<<<<<<< .mine
        Ob = self.Obh2/self.h**2
        H = self.h*((1.0-Ob-self.Omx-self.Or)+Ob/(np.exp(lna))**3+y[0]+y[1])**(0.5)
        factor = self.Lambda*y[0]/H
        return array([ -3*y[0] - factor, -4*y[1] + factor])
=======
        ## we are solving rx, so that rhox=rx/a**3 and rhor=rr/a**4
        ##
        a=exp(lna)
        NuContrib=self.NuDensity.rho(a)/self.h**2
        H2=self.Ocb/a**3+self.Omrad/a**4+NuContrib+(1.0-self.Om-self.Omx-self.Or)+y[0]/a**3+y[1]/a**4
        H=sqrt(abs(H2))
        factor = self.lam*y[0]/H
        return array([ - factor, + factor])
>>>>>>> .r156228


    def SolveEq(self):
        if (self.varyOr or self.lam==0):
            yinit= array([self.Omx, self.Or])
            sol =odeint(self.RHS,yinit,self.logar)
        else:
            lowr=0
            highr=0.3
            eps=1e3
            c=0
            while (abs(eps)>1e-4):
                mid=(lowr+highr)/2
                yinit= array([self.Omx, mid])
                sol =odeint(self.RHS,yinit,self.logar)
                self.sol=sol
                eps=sol[-1,1]
                #print "tried: ", mid,eps
                if (eps>0):
                    highr=mid
                else:
                    lowr=mid
                if (c>10):
                    print "Still fucked after 10 tries."
                    print self.Om, self.Or, self.lam
                    stop()
            self.Or=mid
        ## stupid interp1d doesn't take inverses
        self.rx=interp1d(self.ilogar,sol[::-1,0])
        self.rr=interp1d(self.ilogar,sol[::-1,1])
    
    
    def RHSquared_a(self,a):
        NuContrib=self.NuDensity.rho(a)/self.h**2
        lna=log(a)
        return self.Ocb/a**3+self.Omrad/a**4+NuContrib+(1.0-self.Om-self.Omx-self.Or)+self.rx(lna)/a**3+self.rr(lna)/a**4


<<<<<<< .mine
#Useful for plotting and comparison to LCDM

#    def RHSquared_a2(self,a): 
#        rhox = self.Om/a**3
#        rhor = self.Omr/a**4
#        return (rhox +rhor +(1.0-self.Om-self.Omr))

#    def printA(self):
#       time= logspace(0.0,-5.0,100)
#       y1 = self.SolveEq()
#       fig = pyplot.figure()
#       ax = fig.add_subplot(1,1,1)
#       ax.set_xscale('log')
#       ax.plot(time,y1[:,0]/self.Hub2(y1,time),label='$O_x$')
#       ax.plot(time,y1[:,1]/self.Hub2(y1,time),label='$O_r$')
#       show()

    def Analit(self, lna):
        a=exp(lna)
        rx= self.Omx/self.Or
        be= self.Lambda*(1.0+rx)/(self.h*1.)  
        factor = ((a**(be-1)+rx)/(1+rx))**(-be/(be-1))  
        rhox = self.Omx*a**(-3)*factor
        return rhox 
=======
>>>>>>> .r156228
